# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# TODO: revise package.json scripts and readme instructions after all of this
# - Check what docker compose is actually doing
# - Go through all the standard worflows;
#   - start/stop/restart/debug/migraiton/adding mock data/cleaning up
services:
  app:
    depends_on:
      db:
        condition: service_healthy
    build:
      # see dockerfile
      target: dev
      # relative to docker-compose command running directory
      context: .
      # relative to build > context
      dockerfile: docker/Dockerfile
    env_file: .env
    environment:
      # refers to the db service name
      - POSTGRES_HOST=db
    ports:
      # HOST_PORT:CONTAINER_PORT
      - 3000:3000
      # TODO: check debugging,
      # - tuts: https://docs.docker.com/language/nodejs/develop/#configure-and-run-a-development-container
      # - example src: https://github.com/docker/docker-nodejs-sample
      - 9229:9229 # debugging
    volumes:
      # See Dockerfile WORKDIR
      - ./drizzle:/usr/src/app/drizzle
      - ./src:/usr/src/app/src
  
  # TODO: check migration workflow and update the package.json scripts
  db:
    # see postgres image doc:
    # https://github.com/docker-library/docs/blob/master/postgres/README.md
    image: postgres
    attach: false
    restart: always
    # postgres image already init db and user based on the env
    # so we can use the init script only if we need something more
    env_file: .env
    environment:
      # refers to the secrets/db-password definition at the bottom of this file
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    secrets:
      - db-password
    expose:
      - 5432
    healthcheck:
      # Postgres could be setup correctly from env but pg_isready still needs to know:
      # https://stackoverflow.com/a/76669295
      test: [
        "CMD",
        "pg_isready",
        "--dbname=${POSTGRES_DB}",
        "--username=${POSTGRES_USER}"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      # refers to the volumes/db-data definition at the bottom of this file
      - db-data:/var/lib/postgresql/data

  # TODO: check drizzle studio stuff
  # drizzle-studio:
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile
  #   env_file:
  #     - path: ../.env
  #   # this is wrong, don't use host's drizzle studio
  #   # network_mode: host
  #   # ports:
  #   #   - 4983:4983
  #   volumes:
  #     - ../drizzle:/usr/src/app/drizzle
  #   command: npm run db-studio

  # Setup: https://github.com/docker/awesome-compose/tree/master/postgresql-pgadmin
  pgadmin:
    image: dpage/pgadmin4:latest
    attach: false
    env_file: .env
    ports:
      - 5050:80

volumes:
  db-data:

secrets:
  db-password:
    file: ./drizzle/password.txt
